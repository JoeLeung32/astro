---
export const prerender = true
import "@fontsource-variable/baloo-2"
import AppLayout from "@layouts/AppLayout/AppLayout.astro"
import LinkableCard from "@components/Cards/LinkableCard.svelte"
import "@styles/topic_travel.css"
import fetchApi from "@libs/strapi"
import type Place_Country from "@interface/place_country"
export async function getStaticPaths() {
	const countries = await fetchApi<Place_Country[]>({
		endpoint: "place-countries",
		wrappedByKey: "data",
		query: {
			"populate[place_regions][sort][0]": "abbreviation:ASC",
			"populate[place_regions][[filters][place_location_postcodes][id][$gte]": "1",
			"populate[capitalRegion]": "*"
		}
	})
	return countries.map((data) => ({
		params: {
			country: data.attributes.name
		},
		props: data
	}))
}

const { pathname } = Astro.url
// const params = Astro.params
const country = Astro.props
if (!country) {
	return Astro.redirect("/404")
}

// const capitalRegionData = country?.attributes.capitalRegion.data || undefined
const regionsData = country?.attributes.place_regions.data || undefined
---
<AppLayout title={country.attributes.name}>
	<div slot="header" />
	<div slot="breadcrumb" />
	<main class="topic-container">
		<h1 class="topic-h1">{country.attributes.name}</h1>
		<!--
		<h2 class="topic-h2">Capital Region:</h2>
		<p>{capitalRegionData.attributes.name}</p>
		-->
		<h2 class="topic-h2">Regions (State / Territory)</h2>
		<div class="topic-gridList">
			{regionsData.map((data) => (
				<LinkableCard internalUrl={`${pathname}/${data.attributes.name}`} client:load>
					<span slot="title">
						{data.attributes.name}
					</span>
				</LinkableCard>
			))}
		</div>
	</main>
	<div slot="footer" />
</AppLayout>
