---
export const prerender = true
import { Icon } from "astro-icon/components"
import "@fontsource-variable/baloo-2"
import AppLayout from "@layouts/AppLayout/AppLayout.astro"
import CopyToClipboard from "@components/CopyToClipboard/CopyToClipboard.astro"
import PhotoSwiper from "@components/PhotoSwiper/PhotoSwiper.svelte"
import "@styles/topic_travel.css"
import fetchApi from "@libs/strapi"
import type Place_Location from "@interface/place_location"
import type StrapiMediaImage from "@interface/strapi_media_image"
export async function getStaticPaths() {
	const locations = await fetchApi<Place_Location[]>({
		endpoint: "place-locations",
		wrappedByKey: "data",
		query: {
			"populate[images][sort][0]": "name:ASC",
			"populate[place_location_tags]": "*",
			"populate[place_location_type]": "*",
			"populate[place_location_postcodes]": "*",
			"populate[place_location_postcode][populate][place_region][fields][0]": "name",
			"populate[place_location_postcode][populate][place_region][populate][place_country][fields][0]": "name"
		}
	})
	return locations.map((data) => {
		const place_location_postcode = data.attributes.place_location_postcode
		const place_region = place_location_postcode.data.attributes.place_region
		const place_country = place_region.data.attributes.place_country
		return {
			params: {
				country: place_country.data.attributes.name,
				region: place_region.data.attributes.name,
				location: data.attributes.name
			},
			props: data
		}
	})
}

// const { pathname } = Astro.url
// const params = Astro.params
const location = Astro.props
if (!location) {
	return Astro.redirect("/404")
}
const imageData: StrapiMediaImage[] = location?.attributes.images.data || undefined
const tagData = location?.attributes.place_location_tags.data || undefined
const typeData = location?.attributes.place_location_type.data || undefined
const postCodeData = location?.attributes.place_location_postcode.data || undefined
---
<AppLayout title={location.attributes.name} description={location.attributes.description}>
	<div slot="header" />
	<div slot="breadcrumb" />
	<main class="topic-container-pt0">
		<h1 class="topic-h1">{location.attributes.name}</h1>
		<div class="location-information grid grid-cols-2 gap-2">
			<Icon name="mdi:book-open" size={18} />
			<div>
				<p title={typeData.attributes.slug}>{typeData.attributes.name}</p>
			</div>
			<Icon name="mdi:tag" size={18} />
			<div>
				{tagData.map(tag => (
					<span title={tag.attributes.slug}>{tag.attributes.name}</span>
				))}
			</div>
			<Icon name="mdi:land-plots-marker" size={18} />
			<p>{postCodeData.attributes.postcode}, {postCodeData.attributes.name}</p>
			<Icon name="mdi:home-city-outline" size={18} />
			<CopyToClipboard googleMap="true" value={location.attributes.address} />
			<Icon name="mdi:map-marker" size={18} />
			<CopyToClipboard googleMap="true" value={`${location.attributes.latitude}, ${location.attributes.longitude}`} />
		</div>
		<hr class="my-4"/>
		<h3 class="topic-h3">Description</h3>
		<div class="prose">
			{location.attributes.description}
		</div>
		<hr class="my-4"/>
		<h3 class="topic-h3">Photos</h3>
		<PhotoSwiper element="placeGallery" images={imageData} client:load />
	</main>
	<div slot="footer" />
</AppLayout>

<style>
    .location {
		&-information {
            grid-template-columns: 18px 1fr;
			@apply items-center;
		}
	}
</style>
