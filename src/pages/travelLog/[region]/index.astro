---
import "@fontsource/lato"
import "@fontsource-variable/lora"
import HTML from "../../../components/HTML/HTML.astro"
import queryRegion from "./data"
const params = Astro.params
const { region } = params
const response = await new Promise((resolve) => {
	resolve(queryRegion(region!))
}) as any
const postcodes = response?.at(0)?.attributes?.place_location_postcodes?.data
const postcodesUIData =
	postcodes
		.sort((a: any, b: any) => a.attributes.name.localeCompare(b.attributes.name))
		.sort((a: any, b: any) => a.attributes.postcode - b.attributes.postcode)
const pageUrl = `/travelLog/${region}`
---
<HTML>
<main>
	<div class="region p-4">
		<h1 class="region--name text-2xl pb-3">{region}</h1>
		<div class="region--grid grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
			{postcodesUIData && postcodesUIData.map(({ attributes }: any) => {
				return (
					<div class="region--card block p-3 rounded shadow">
						<a href=`${pageUrl}/${attributes.postcode}` class="region--card-postcode block text-xs font-bold tracking-widest">
							{attributes.postcode}
						</a>
						<a href=`${pageUrl}/${attributes.postcode}/${attributes.name}` class="region--card-name text-md font-medium">
							{attributes.name}
						</a>
					</div>
				)
			})}
		</div>
	</div>
</main>
</HTML>
<style is:inline>
	body > div.app {
		grid-template-columns: repeat(1, 1fr);
		grid-template-rows: minmax(32px, auto) 1fr minmax(24px, auto);
		grid-template-areas:
								"hd"
								"ma"
								"ft";

		main {
			grid-area: ma;
		}
	}
</style>
<style>
    .region {
        &--name {
            font-family: "Lora Variable", sans-serif;
        }

        &--card {
            &-name {
                font-family: "Lora Variable", sans-serif;
            }
        }
    }
</style>
